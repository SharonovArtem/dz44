using System;
using System.Collections.Generic;

namespace ConsoleApp9
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Station station = new Station();
            bool isWorking = true;

            while (isWorking)
            {
                station.ShowInfoAboutAboutTrainList();
                Console.WriteLine("Нажмите на Q чтобы создать поезд");
                Console.WriteLine("Чтобы выйти нажмите Esc");
                ConsoleKeyInfo keyInput = Console.ReadKey(true);

                if (keyInput.Key == ConsoleKey.Q)
                {
                    station.CreateTrain();
                }
                else if (keyInput.Key == ConsoleKey.Escape)
                {
                    isWorking = false;
                }
            }
        }
    }

    class Direction
    {
        public Direction(string startPoint, string finishPoint)
        {
            StartPoint = startPoint;
            FinishPoint = finishPoint;
        }

        public string StartPoint { get; private set; }
        public string FinishPoint { get; private set; }

        public void Add()
        {
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine("Откуда поедет поезд?");
                StartPoint = Console.ReadLine();

                Console.WriteLine("Какая конечная точка?");
                FinishPoint = Console.ReadLine();

                if (FinishPoint != StartPoint)
                {
                    isWorking = false;
                }
                else
                {
                    Console.WriteLine("Пункт отправления не может быть равен пункту прибытия. Введите значения заново");
                }
            }
        }

        public void Shown()
        {
            Console.WriteLine(StartPoint + " - " + FinishPoint);
        }
    }

    class Van
    {
        public Van(int maxAccomodation)
        {
            MaxAccomodation = maxAccomodation;
        }

        public int MaxAccomodation { get; private set; }
    }

    class Station
    {
        private List<Flight> _flights = new List<Flight>();

        public void CreateTrain()
        {
            int passengersNumber;
            int occupiedPlaces = 0;
            int minimalPassangersNumber = 50;
            int maximalPassangersNumber = 400;
            int sizeOfSmallVan = 50;
            int sizeOfMediumVan = 75;
            int sizeOfLargeVan = 100;
            int smallVanNumber = 0;
            int mediumVanNumber = 1;
            int largeVanNumber = 2;
            int maximalRandomNumber = 3;
            int occupiedVansNumber = 0;
            Direction direction = new Direction(null, null);
            List<Van> occupiedVans = new List<Van>();

            direction.Add();

            Random random = new Random();

            passengersNumber = random.Next(minimalPassangersNumber, maximalPassangersNumber);

            while (occupiedPlaces < passengersNumber)
            {
                int typeOfVan = random.Next(smallVanNumber, maximalRandomNumber);

                if (typeOfVan == smallVanNumber)
                {
                    Van van = new Van(sizeOfSmallVan);
                    occupiedVans.Add(van);
                    occupiedVansNumber++;
                    occupiedPlaces += van.MaxAccomodation;
                }
                else if (typeOfVan == mediumVanNumber)
                {
                    Van van = new Van(sizeOfMediumVan);
                    occupiedVans.Add(van);
                    occupiedVansNumber++;
                    occupiedPlaces += van.MaxAccomodation;
                }
                else if (typeOfVan == largeVanNumber)
                {
                    Van van = new Van(sizeOfLargeVan);
                    occupiedVans.Add(van);
                    occupiedVansNumber++;
                    occupiedPlaces += van.MaxAccomodation;
                }
            }

            Flight train = new Flight(direction, occupiedVans, occupiedVansNumber, passengersNumber);

            _flights.Add(train);

            Console.WriteLine("Количество вагонов в поезде: " + occupiedVansNumber + " вагонов");
            Console.WriteLine("Общее количество занятых мест: " + passengersNumber + " мест");
            Console.WriteLine("Направление поезда: ");
            direction.Shown();
        }

        public void ShowInfoAboutAboutTrainList()
        {
            for (int i = 0; i < _flights.Count; i++)
            {
                Console.WriteLine("Рейс номер: " + i + ":");
                _flights[i].ShowInfo();
            }
        }
    }

    class Flight
    {
        public Flight(Direction direction, List<Van> occupiedVans, int vans, int passengersNumber)
        {
            _occupiedVans = occupiedVans;
            _vansNumber = vans;
            _passengersNumber = passengersNumber;
            _direction = direction;
        }

        private List<Van> _occupiedVans;
        private int _vansNumber;
        private int _passengersNumber;
        private Direction _direction;

        public void ShowInfo()
        {
            Console.WriteLine("Количество вагонов: " + _vansNumber);
            Console.WriteLine("Всего пассажиров: " + _passengersNumber);
            Console.WriteLine("Точка отправления: " + _direction.StartPoint);
            Console.WriteLine("Точка прибытия: " + _direction.FinishPoint);
        }

        public void AddVan(Van van)
        {
            _occupiedVans.Add(van);
        }
    }
}
