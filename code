using System;
using System.Collections.Generic;

namespace ConsoleApp9
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Station station = new Station();
            bool isWorking = true;

            while (isWorking)
            {
                Console.WriteLine("Нажмите на Q чтобы создать поезд");
                Console.WriteLine("Чтобы вывести информацию обо всех поездах нажмите W");
                Console.WriteLine("Чтобы выйти нажмите Esc");
                ConsoleKeyInfo keyInput = Console.ReadKey(true);

                if (keyInput.Key == ConsoleKey.Q)
                {
                    station.CreateTrain();
                }
                else if (keyInput.Key == ConsoleKey.Escape)
                {
                    isWorking = false;
                }
                else if (keyInput.Key == ConsoleKey.W)
                {
                    station.ShowInfoAboutAboutTrainList();
                }
            }
        }
    }

    class Direction
    {
        private string _startPoint;
        private string _finishPoint;

        public Direction(string startPoint, string finishPoint)
        {
            _startPoint = startPoint;
            _finishPoint = finishPoint;
        }

        public void AddDirection()
        {
            Console.WriteLine("Откуда поедет поезд?");
            _startPoint = Console.ReadLine();

            Console.WriteLine("Какая конечная точка?");
            string userInput = Console.ReadLine();

            _finishPoint = userInput;
        }

        public string ReturnStartPoint()
        {
            return _startPoint;
        }

        public string ReturnFinishPoint()
        {
            return _finishPoint;
        }

        public void ShowDirection()
        {
            Console.WriteLine(_startPoint + " - " + _finishPoint);
        }
    }

    class Van
    {
        private int _maxAccomodation;

        public Van(int maxAccomodation)
        {
            _maxAccomodation = maxAccomodation;
        }

        public int GetLenght()
        {
            return _maxAccomodation;
        }
    }

    class Station
    {
        private List<Train> _trains = new List<Train>();
        private Direction _direction = new Direction(null, null);
        private int _passengersNumber;
        private int _occupiedVans = 0;
        private int _occupiedPlaces = 0;

        public void ComplementVan(Van van)
        {
            _occupiedVans++;
            _occupiedPlaces += van.GetLenght();
        }

        public void CreateTrain()
        {
            _direction.AddDirection();

            if (_direction.ReturnFinishPoint() != _direction.ReturnStartPoint())
            {
                Random random = new Random();

                _passengersNumber = random.Next(50, 400);

                while (_occupiedPlaces < _passengersNumber)
                {
                    int typeOfTrain = random.Next(0, 2);
                    if (typeOfTrain == 0)
                    {
                        Van van = new Van(50);
                        ComplementVan(van);
                    }
                    else if (typeOfTrain == 1)
                    {
                        Van van = new Van(75);
                        ComplementVan(van);
                    }
                    else if (typeOfTrain == 2)
                    {
                        Van van = new Van(100);
                        ComplementVan(van);
                    }
                }

                Train train = new Train(_occupiedVans, _passengersNumber, _direction.ReturnStartPoint(), _direction.ReturnFinishPoint());

                _trains.Add(train);

                ShowInfoAboutCreatedTrain();
            }
            else
            {
                Console.WriteLine("Не удалось создать поезд");
            }
        }

        public void ShowInfoAboutCreatedTrain()
        {
            Console.WriteLine("Количество вагонов в поезде: " + _occupiedVans + " вагонов");
            Console.WriteLine("Общее количество занятых мест: " + _passengersNumber + " мест");
            Console.WriteLine("Направление: ");
            _direction.ShowDirection();
        }

        public void ShowInfoAboutAboutTrainList()
        {
            for (int i = 0; i < _trains.Count; i++)
            {
                Console.WriteLine("Рейс номер: " + i + ":");
                _trains[i].ShowInfo();
            }
        }
    }

    class Train
    {
        private int _vansNumber;
        private int _passengersNumber;
        private string _startPoint;
        private string _finishPoint;

        public Train(int vans, int passengersNumber, string startPoint, string FinishPoint)
        {
            _vansNumber = vans;
            _passengersNumber = passengersNumber;
            _startPoint = startPoint;
            _finishPoint = FinishPoint;
        }

        public void ShowInfo()
        {
            Console.WriteLine(_vansNumber);
            Console.WriteLine(_passengersNumber);
            Console.WriteLine(_startPoint);
            Console.WriteLine(_finishPoint);
        }
    }
}
